### A Pluto.jl notebook ###
# v0.14.3

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ‚ïî‚ïê‚ï° 65bad610-a606-11eb-1058-016b40953c55
begin
	using DrWatson
	using DifferentialEquations
	using Plots
	# plotlyjs()
	using PlutoUI
	using Measurements
	using ImageShow
	using PNGFiles
	using ImageIO
	gr()
end;

# ‚ïî‚ïê‚ï° 85b9ab0e-eb1d-47ed-956d-39dea6a46fbc
TableOfContents(title="Sum√°rio",aside=true)

# ‚ïî‚ïê‚ï° 8cf10a61-6e4a-4906-92a0-3d79105821cb
html"<button onclick='present()'>present</button>"

# ‚ïî‚ïê‚ï° c90b1f2a-c307-422d-9012-d81626c8371f
md"""
# Exemplo de notebook iterativo
"""

# ‚ïî‚ïê‚ï° a12e82cb-b32b-4220-bf6e-e16a9cf2ccdd
md"""
Esse notebook √© um exemplo simples de como implementar um notebook interativo que pode ser usado para ensinar t√≥picos diversos. De um modo geral ele combina a versatilidade de poder escrever equa√ß√µes e dedu√ß√µes completas de modelos, bem como ser usado para rodar c√≥digos e apresenta√ß√£o de resultados.
"""

# ‚ïî‚ïê‚ï° e03e002b-2cb3-43f8-a3bc-7511d8c610e6
md"""
## Adi√ß√£o de m√≠dia

Outra funcionalidade muito importante do **notebook** √© a capacidade de lidar com tano v√≠deos, links e imagens sem grandes problemas. Muitas dessas fun√ß√µes estar√£o associadas √† linguagem j√∫lia e ser√£o apresentadas a seguir, contudo um exemplo muito √∫til, como o de adicionar v√≠deos pode ser demosntrado por:
"""

# ‚ïî‚ïê‚ï° d2d3386c-5bb6-4b25-aaab-66dd332434b0
html"""
<p style="
font-size: 1.5rem;
text-align: center;
opacity: .8;
"><em>Aula 1</em></p>
<div style="display: flex; justify-content: center;">
<div  notthestyle="position: relative; right: 0; top: 0; z-index: 300;">
<iframe src="https://www.youtube.com/embed/R0QtTarMu0Y" width=400 height=250  frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>
</div>
</div>
"""

# ‚ïî‚ïê‚ï° 124e4008-bc25-4b70-86bd-680b18cf5c4e
philip_link= "https://user-images.githubusercontent.com/6933510/107239146-dcc3fd00-6a28-11eb-8c7b-41aaf6618935.png";

# ‚ïî‚ïê‚ï° a62a2989-dc16-49b8-888f-6ce958e84f31
philip_img_f=download(philip_link);

# ‚ïî‚ïê‚ï° 93188ea6-3074-4780-8575-4253921e5d52
philip_img=load(philip_img_f)

# ‚ïî‚ïê‚ï° 38795d2b-ab1d-4542-b425-331ed8593d17
md"""
## C√≥digos e programa√ß√£o

Claro a maior parte das funcionalidades do **notebook** vai estar diretamente com programa√ß√£o. No caso o **Pluto** foi desenvolvido na linguagem ```Julia```. Essa linguagem de programa√ß√£o √© relativamente nova, sendo lan√ßada em [2012](https://pt.wikipedia.org/wiki/Julia_(linguagem_de_programa√ß√£o)), contudo apenas em 2018 se tornou uma linguagem utilizavel pelo plubico comum.


A raz√£o do porque este **notebook** foi desenvolvido em ```Julia``` est√° diretamente relacionado com a velocidade da linguagem e sua simplicidade. Ela √© uma linguagem din√¢mica, ou seja n√£o s√£o precisos declarar tipos antecipadamente, contudo, ela consegue obter performance similares √†s de [C/C++](https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/julia-gcc.html).

Assim foi poss√≠vel criar um **notebook** que fosse ao mesmo tempo *reativo* e que n√£o dependesse de maquinas poderosas para execu√ß√£o.

Como a linguagem ```Julia``` ainda foi implementada baseada em ```UTF-8```, √© poss√≠vel programar usando inclusive emojis e simbolos em *grego*.

œÉ ou ‚úã

"""

# ‚ïî‚ïê‚ï° d0cebda6-38c9-41d6-b9a6-ac82dbaac6a5
md"""
## Linguagem Julia

Como a linguagem ```Julia``` √© parte fundamental do uso deste **notebook** s√≥ ser√° apresentado um conjunto b√°sicos de opera√ß√µes e uso da linguagem. √â importante ressaltar que a sintaxe √© muito simples, lembrando tanto ```Python``` quanto ```Matlab```.

Primeiro, para declarar uma vari√°vel pode-se fazer:
"""

# ‚ïî‚ïê‚ï° 853a00c7-fe94-4e07-b61c-eb19179082a2
vari√°vel=1.0

# ‚ïî‚ïê‚ï° 4a96a373-01bd-4f99-b17a-0686d782830b
md"""
Assim pode-se operar com ela como √© feito em demais linguagens sem grandes dificuldades, por exemplo:
"""

# ‚ïî‚ïê‚ï° f3c870d2-1ac6-44fa-98a3-aa38c777261f
vari√°vel+1

# ‚ïî‚ïê‚ï° f0f1b644-3569-4728-aa94-e51b038ff889
md"""
Uma quest√£o importante desse **notebook** √© que quando se deseja realizar v√°rias opera√ß√µes em uma mesma c√©lula deve-se incluir o c√≥digo dentro de um bloco ```begin-end```, como apresentado a seguir:
"""

# ‚ïî‚ïê‚ï° e6b95098-ed7d-4e23-a02c-6c0528678b59
begin
	a=1
	b=3.0
	c=a+b
	d=b^a*2
end

# ‚ïî‚ïê‚ï° 5cd656f1-3b17-4270-bf51-6cedebcd943a
md"""
Como √© padr√£o na linguagem ```Julia``` o resultado da √∫ltima opera√ß√£o de um bloco ser√° retornado. Para omitir esse retorno √© poss√≠vel adicionar ";" no final do bloco.
"""

# ‚ïî‚ïê‚ï° 76743399-a50f-4425-83a3-bb91053d4f40
md"""
### Iteratividade b√°sica

Al√©m do **notebook** os desenvolvedores do Pluto incluiram um pacote que consegue adicionar grandes funcionalidades de iteratividade para simples implementa√ß√£o, o ```PlutoUI```.

Ele foi adicionado no come√ßo deste **notebook**, assim podemos usar facilmente as fun√ß√µes iterativas fornecidas, por exemplo, podemos criar um slides simples para valoreses atribudos em uma vari√°vel.
"""

# ‚ïî‚ïê‚ï° 699e58f5-c842-4c9e-98f6-6924aa593d2b
@bind slider_ex Slider(0:10)

# ‚ïî‚ïê‚ï° aa1d5280-e0c2-463b-a7fb-9144d7639545
slider_ex

# ‚ïî‚ïê‚ï° 9cb28926-5dd2-4964-be7f-88459548575e
md"""
Diferentes formata√ß√µes podem ser feitas e como o **notebook** converte o texto em *markdown* para *HTML* durante execu√ß√£o, √© poss√≠vel formatar diretamente de dentro do bloco de texto, por exemplo:

x‚Çõ= $(@bind x‚Çõ Slider(2.5:0.1:œÄ,show_value=true, default=2.6))
"""

# ‚ïî‚ïê‚ï° 91637125-43af-4bf7-a6c2-e7e7c3f99bf6
x‚Çõ*2.0

# ‚ïî‚ïê‚ï° 32b892ce-34bd-477d-b239-5714af4bf409
md"""
Outros exemplos de iteratividade podem ser:

caixa de texto = $(@bind texbox TextField())

sele√ß√£o de tempo: $(@bind lunch_time TimeField())

caixa de n√∫meros= $(@bind numfield NumberField(0.00 : 0.01 : 0.30))

sele√ß√£o de lista: $(@bind veg Select(["potato" => "ü•î", "carrot" => "ü•ï"], default="carrot"))

Radio: $(@bind veg2 Radio(["potato" => "ü•î", "carrot" => "ü•ï"], default="carrot"))

bot√£o: $(@bind go Button("Go!"))


Mais exemplos de utilidades da biblioteca ```PlutoUI``` podem ser encontradas em: [https://juliahub.com/docs/PlutoUI/abXFp/0.7.6/autodocs/](https://juliahub.com/docs/PlutoUI/abXFp/0.7.6/autodocs/) ou atrav√©s dos v√≠deos da comunidade ```Julia``` atrav√©s do canal deles do youtube: [https://www.youtube.com/user/JuliaLanguage](https://www.youtube.com/user/JuliaLanguage)


"""

# ‚ïî‚ïê‚ï° 149e0cc8-1a4e-4a0e-88ac-e31bb4c99136
md"""
### Gr√°ficos

Para visualiza√ß√£o de resultados e de fun√ß√µes √© poss√≠vel utilizar o pacote ```Plots.jl``` que possuem grande varidade de gr√°ficos e fun√ß√µes de alta performance.
"""

# ‚ïî‚ïê‚ï° 6ddd9b7b-5479-42b1-ac31-178c0fa3a556
md"""Para demonstrar isso podemos usar uma simples fun√ß√£o de segundo grau:

$$f(x)=x^2-Œ≤x+3$$

onde Œ± ser√° um parametro que poderemos variar posteriormente. Para come√ßo, assumiremos $Œ≤ = œÄ$.
"""

# ‚ïî‚ïê‚ï° 64586b01-fe84-40a0-82c9-0486032be1ac
f1(x)=x.^2 .-œÄ.*x .+3.0

# ‚ïî‚ïê‚ï° f244eda6-d45a-466f-be67-d04fdb4b7580
x_plot=[0:0.01:3];

# ‚ïî‚ïê‚ï° 24ea9ddd-0dd9-4dea-8817-4f88fb4bc294
plot(x_plot,f1.(x_plot),xlabel="x",ylabel="f(x)")

# ‚ïî‚ïê‚ï° dec1f81c-6425-4403-97de-16e2e6234e8e
md"""
Agora vamos adicionar um slider e tornar os gr√°ficos iterativos...

Œ≤= $(@bind Œ≤ Slider(0.85œÄ:0.01:1.5œÄ,show_value=true, default=œÄ*1.0))
"""

# ‚ïî‚ïê‚ï° 69d2a394-2af9-41fb-90b9-7d44adc06184
f2(x)=x.^2 .-Œ≤.*x .+3.0

# ‚ïî‚ïê‚ï° cd78a714-ba02-46b2-8105-1ef96b042872
begin
	plot(f1,xlabel="x",ylabel="f(x)",label="Base Plot",lw=1.5)
	plot!(f2,linestyle=:dash,label="Iterative",lw=2)
end

# ‚ïî‚ïê‚ï° ffdeaed4-58a8-4af1-88fa-46d14b41f3c9
md"""
## Problemas diferenciais

Por fim um exemplo de uma EDO resolvida.


Vamos usar a tradicional:

$$\frac{du}{dt}=Œ≥u$$

Se testarmos para $Œ≥=1.01$ a solu√ß√£o para este problema ser√°:

$$u(t)=u‚ÇÄ\exp(1.01t)$$

Assim, podemos usar este exemplo em conjunto do pacote ```DifferentialEquations``` para resolver esta EDO.

Para fazer isso, primeiro, √© precisodeclarar o problema diferencial. Isso pode ser feito por meio de:

"""

# ‚ïî‚ïê‚ï° 4b37c2d9-6718-4d13-8619-48bce64bbcdd
begin
	f(u,p,t) = 1.01*u
	u0 = 1/2
	tspan = (0.0,1.0)
	prob = ODEProblem(f,u0,tspan)
end

# ‚ïî‚ïê‚ï° 0c4dce74-0880-494c-8084-0f7bc4784b1e
md"""
Para resolver esse problema podemos usar a fun√ß√£o ```solve```. A mesma recebe alguns parametros, o primeiro ser√° o m√©todo escolhido para fazer a integra√ß√£o do problema. Para este exemplo um Runge-Kutta de 4·µÉ ordem foi selecionado, contudo, o pacote conta com mais de 70 solvers diferentes que poderiam ser testados aqui. 

"""

# ‚ïî‚ïê‚ï° e1e4e1ec-9cfc-423b-b50b-bf892dc6eae1
sol=solve(prob,RK4(), reltol = 1e-8)

# ‚ïî‚ïê‚ï° 370cd453-7c1c-468c-8cc4-7b8e7bd3e894
md"""
Uma funcionalidade muito importante da solu√ß√£o deste problema √© o comportamento tanto de vetor quanto de fun√ß√£o dependendo de como chamar a solu√ß√£o.

Por exemplo, ao chamarmos a solu√ß√£o como um vetor ele ira retornar o resultado em um dado ponto espec√≠fico.
"""

# ‚ïî‚ïê‚ï° f7a1a2db-bb5d-4a69-bdbc-b200a36147e2
sol[1],sol[4]

# ‚ïî‚ïê‚ï° 9ac432fc-46f6-4954-b701-b7864a4adc48
md"""
Por outro lado, caso chamemos a solu√ß√£o como uma fun√ß√£o, automaticamente ser√° usado um interpolador cuja ordem de interpola√ß√£o √© automaticamente ajustada ao solver utilizado. 

Por exemplo, caso chamemos a solu√ß√£o no tempo $t=0.2$, a solu√ß√£o ser√° o resultado de uma interpola√ß√£o nesse ponto.
"""

# ‚ïî‚ïê‚ï° 37668c8b-31b4-459f-8cba-4db86c94626e
sol(0.20)

# ‚ïî‚ïê‚ï° cec483fd-c489-47b3-ab50-226678d0d644
md"""
Em representa√ß√£o gr√°fica, o autor do pacote incluiu uma receita para que os plots sejam feitos automaticamente.
"""

# ‚ïî‚ïê‚ï° 45ba7464-5ef0-467c-bc7f-e7fc02727e9a
plot(sol)

# ‚ïî‚ïê‚ï° 15874c4e-cf63-4ab1-8fa7-ef42c15e66c0
md"""
## Acoplamento com erros de medi√ß√£o

Agora uma intera√ß√£o interessante e acidental que ocorreu na linguagem ```Julia``` envolvem o pacote ```DifferentialEquations``` e o pacote ```Measurements```. O segundo pacote √© usado para adicionar quest√µes como imprecis√µes decorrentes de medi√ß√£o nas analises. 

Ele inclui o opreador ¬± que pode ser usado para incluir o erro esperado de medi√ß√£o em uma dada vari√°vel. A propaga√ß√£o de incertezas √© feita autom√°ticamente e como consequencia do *Multiple Dispatch* da linguagem, consegue ser usado por muitos pacotes, mesmo sem necessitar adi√ß√£o de c√≥digo extra.

Um √≥timo exemplo disso √© essa intera√ß√£o entre ```DifferentialEquations``` e ```Measurements```. Esses pacotes podem ser usados em conjunto para adicionar incertezas ao processo de integra√ß√£o de equa√ß√µes diferenciais. Para isso basta incluir incertezas, mesmo que nulas, na condi√ß√£o inicial e adicionar em demais equa√ß√µes que forem pertinentes.

Podemos ent√£o usar o proprio exemplo anterior adicionando 10% de imprecis√£o no Œ≥, bem como 1% de imprecis√£o na medi√ß√£o da condi√ß√£o inicial.

Isso √© feito por meio de:

"""

# ‚ïî‚ïê‚ï° 2ebdbf96-14fb-40ec-8f78-88444f9df967
teste=1.0¬±0.1

# ‚ïî‚ïê‚ï° 38f4cdf0-d090-4d22-923a-8b975bcfa7b3
teste+0.5teste

# ‚ïî‚ïê‚ï° 98f7bc06-2a9e-4fba-8226-c37baba42372
begin		
	Œ≥=1.01¬±1.01*0.1
	f_meas(u,p,t) = Œ≥.*u
	u0_m = 1/2¬± 1/2*0.01
	tspan_m = (0.0,1.0)
	prob2 = ODEProblem(f_meas,u0_m,tspan_m)
end

# ‚ïî‚ïê‚ï° 3c583642-8694-499f-a4e8-f48b8baa9dc0
md"""
Note que o tipo do resultado do problema ODE ser√° do tipo ```Measurement{Float64}```.

Para resolver esse novo problema, pode-se usar o mesmo solver sem nenhuma modifica√ß√£o. A principal diferen√ßa estar√° no resultado, que agora ter√° a incerteza propagada automaticamente.
"""

# ‚ïî‚ïê‚ï° 7f47d73e-c2d4-48fb-ac67-5c5be9781c53
sol2=solve(prob2,RK4(), reltol = 1e-8)

# ‚ïî‚ïê‚ï° 75c104df-0ce9-41f2-be34-fc51d38050fd
md"""
Por fim, o autor do pacote de equa√ß√µes diferenciais adicionou uma receita de gr√°ficos de modo que, quando plotando resultados com incertezas, barras de erro ser√£o automaticamente adicionadas nos pontos simulados. O gr√°fico a seguir mostra exatamente essa quest√£o, com um incerteza pequena no come√ßo claramente cresce em tempos maiores.
"""

# ‚ïî‚ïê‚ï° e10e245d-0160-4acc-ba01-5d738911e854
begin
	u=sol.u
	u2=sol2.u
	plot(sol.t,sol.u,linestyle=:dot,lw=1.5)
	plot!(sol2.t,sol2.u,linestyle=:dash,lw=1.5,label="measurement")
end

# ‚ïî‚ïê‚ï° e0d623a4-9ce3-4a5d-940c-2693d5c411b8
md"""
## Problema cl√°ssico interativo

Um exemplo cl√°ssico de interatividade do **notebook** envolve modelos *SIR* para modelar transmiss√£o de v√≠rus (o momento atual aumentou a popularidade). Podemos ent√£o definir as *EDO*s de modo que:

$$\frac{dS}{dt}=-Œ≤ S I$$
$$\frac{dI}{dt}=Œ≤ S I-Œ≥ I$$
$$\frac{dR}{dt}=Œ≥ I$$
com $S$ o n√∫mero de pessoas sucetiveis √† doen√ßa, $I$ o n√∫mero de infectados e $R$ o n√∫mero de recuperados.


"""

# ‚ïî‚ïê‚ï° 4e6367cf-d09d-498c-98c3-5533e02633dc
sir_ode = @ode_def SIRModel begin
    dS = -Œ≤*S*I
    dI = Œ≤*S*I-Œ≥*I
    dR = Œ≥*I
    end Œ≤ Œ≥

# ‚ïî‚ïê‚ï° 1a4a864f-1079-40db-b242-3b25273f4948
md"""
Œ≤‚Çõ= $(@bind Œ≤‚Çõ Slider(0.05:0.01:0.25,show_value=true,default=0.1))
Œ≥‚Çõ= $(@bind Œ≥‚Çõ Slider(0.01:0.0005:0.025,show_value=true,default=0.015))
"""

# ‚ïî‚ïê‚ï° bad1f201-3c20-469f-933f-10dd3ac2f94d
begin
	parms = [Œ≤‚Çõ,Œ≥‚Çõ]#.¬±0.0025
	init = [0.99,0.01,0.0]#.¬±0.001
	tspan_SIR = (0.0,150.0)
end

# ‚ïî‚ïê‚ï° 79ba3966-8463-4fea-8e24-051c1d916390
sir_prob = ODEProblem(sir_ode,init,tspan_SIR,parms)

# ‚ïî‚ïê‚ï° 6ac982a0-e393-4c06-88eb-7ec798c65072
sir_sol = solve(sir_prob,RK4(),saveat = 1.0);

# ‚ïî‚ïê‚ï° 038502c5-fd71-4305-81d7-b0c16ff8c0d4
plot(sir_sol,xlabel="Time",ylabel="Number")

# ‚ïî‚ïê‚ï° d7d633dc-7d66-4d8c-9135-fa70444dc6ea
sir_sol

# ‚ïî‚ïê‚ï° 56afb21c-e994-46bc-8bb1-c3011001e25e
function blue(s::String)
	HTML("<span style='color:blue'> $(s)  </span>")
end;

# ‚ïî‚ïê‚ï° c7655f51-dc74-40e4-8a9f-8baba92b582f
md"""
## Divis√£o de t√≥picos

O notebook **Pluto** conta com a capacidade de usar o padr√£o *markdown* para tratar de trecho de textos e organiza√ß√£o de documentos.

O *markdown* √© muito usado por ser simples. Al√©m disso permite divis√£o em t√≥picos conforme este notebook est√° formatado. Para mais informa√ß√µes sobre o *markdown* √© poss√≠vel pesquisar sobre o t√≥pico separadamente, a fonte a seguir pode ser √∫til: [Wikip√©dia Markdown](https://pt.wikipedia.org/wiki/Markdown).

Como j√° se pode perceber √© poss√≠vel incluir div√©rsos *links* e funcionalidades ao notebook sem grande dificuldade. O motivo que permite isso est√° ligado ao fato do **notebook** converter e formatar este arquivo com base em um interpetrador de *HTML*, assim permitindo incluir virtualmente qualquer funcionalidade, contanto que se entenda de *HTML*.

Outra quest√£o importante √© que este **notebook** consegue interpetrar e apresentar equa√ß√µes formatadas em $\LaTeX$, assim podemos incluir equa√ß√µes complexas formatadas com simplicidade. Por exemplo:

$$f(x)=x^2+2x-3$$

Al√©m dessas fun√ß√µes b√°sicas de organiza√ß√£o o **notebook** tamb√©m consegue lidar com listas e mais outros formatos nativos de *markdown*.

Lista n√£o ordenada:
* Exemplo
* de
* lista

Lista ordenada:
1. Exemplo
2. lista
3. Odernada

Pode-se tambem destacar trechos de textos em caixas individuais:

>Exemplo de texto em destace por caixa

Ou ainda podem ser apresentadas tabelas simples como:

First Header | Second Header
------------ | -------------
Content from cell 1 | Content from cell 2
Content in the first column | Content in the second column



Outras funcionalidades como mudar a cor de texto $(blue("por exemplo")).

Enfim as possibilidades de edi√ß√£o do texto s√£o muito grandes.


"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ï†‚ïê65bad610-a606-11eb-1058-016b40953c55
# ‚ïü‚îÄ85b9ab0e-eb1d-47ed-956d-39dea6a46fbc
# ‚ï†‚ïê8cf10a61-6e4a-4906-92a0-3d79105821cb
# ‚ïü‚îÄc90b1f2a-c307-422d-9012-d81626c8371f
# ‚ïü‚îÄa12e82cb-b32b-4220-bf6e-e16a9cf2ccdd
# ‚ïü‚îÄc7655f51-dc74-40e4-8a9f-8baba92b582f
# ‚ïü‚îÄe03e002b-2cb3-43f8-a3bc-7511d8c610e6
# ‚ïü‚îÄd2d3386c-5bb6-4b25-aaab-66dd332434b0
# ‚ï†‚ïê124e4008-bc25-4b70-86bd-680b18cf5c4e
# ‚ï†‚ïêa62a2989-dc16-49b8-888f-6ce958e84f31
# ‚ï†‚ïê93188ea6-3074-4780-8575-4253921e5d52
# ‚ïü‚îÄ38795d2b-ab1d-4542-b425-331ed8593d17
# ‚ïü‚îÄd0cebda6-38c9-41d6-b9a6-ac82dbaac6a5
# ‚ï†‚ïê853a00c7-fe94-4e07-b61c-eb19179082a2
# ‚ïü‚îÄ4a96a373-01bd-4f99-b17a-0686d782830b
# ‚ï†‚ïêf3c870d2-1ac6-44fa-98a3-aa38c777261f
# ‚ïü‚îÄf0f1b644-3569-4728-aa94-e51b038ff889
# ‚ï†‚ïêe6b95098-ed7d-4e23-a02c-6c0528678b59
# ‚ïü‚îÄ5cd656f1-3b17-4270-bf51-6cedebcd943a
# ‚ïü‚îÄ76743399-a50f-4425-83a3-bb91053d4f40
# ‚ï†‚ïê699e58f5-c842-4c9e-98f6-6924aa593d2b
# ‚ï†‚ïêaa1d5280-e0c2-463b-a7fb-9144d7639545
# ‚ïü‚îÄ9cb28926-5dd2-4964-be7f-88459548575e
# ‚ï†‚ïê91637125-43af-4bf7-a6c2-e7e7c3f99bf6
# ‚ïü‚îÄ32b892ce-34bd-477d-b239-5714af4bf409
# ‚ïü‚îÄ149e0cc8-1a4e-4a0e-88ac-e31bb4c99136
# ‚ïü‚îÄ6ddd9b7b-5479-42b1-ac31-178c0fa3a556
# ‚ï†‚ïê64586b01-fe84-40a0-82c9-0486032be1ac
# ‚ïü‚îÄf244eda6-d45a-466f-be67-d04fdb4b7580
# ‚ï†‚ïê24ea9ddd-0dd9-4dea-8817-4f88fb4bc294
# ‚ïü‚îÄdec1f81c-6425-4403-97de-16e2e6234e8e
# ‚ï†‚ïê69d2a394-2af9-41fb-90b9-7d44adc06184
# ‚ï†‚ïêcd78a714-ba02-46b2-8105-1ef96b042872
# ‚ïü‚îÄffdeaed4-58a8-4af1-88fa-46d14b41f3c9
# ‚ï†‚ïê4b37c2d9-6718-4d13-8619-48bce64bbcdd
# ‚ïü‚îÄ0c4dce74-0880-494c-8084-0f7bc4784b1e
# ‚ï†‚ïêe1e4e1ec-9cfc-423b-b50b-bf892dc6eae1
# ‚ïü‚îÄ370cd453-7c1c-468c-8cc4-7b8e7bd3e894
# ‚ï†‚ïêf7a1a2db-bb5d-4a69-bdbc-b200a36147e2
# ‚ïü‚îÄ9ac432fc-46f6-4954-b701-b7864a4adc48
# ‚ï†‚ïê37668c8b-31b4-459f-8cba-4db86c94626e
# ‚ïü‚îÄcec483fd-c489-47b3-ab50-226678d0d644
# ‚ï†‚ïê45ba7464-5ef0-467c-bc7f-e7fc02727e9a
# ‚ïü‚îÄ15874c4e-cf63-4ab1-8fa7-ef42c15e66c0
# ‚ï†‚ïê2ebdbf96-14fb-40ec-8f78-88444f9df967
# ‚ï†‚ïê38f4cdf0-d090-4d22-923a-8b975bcfa7b3
# ‚ï†‚ïê98f7bc06-2a9e-4fba-8226-c37baba42372
# ‚ïü‚îÄ3c583642-8694-499f-a4e8-f48b8baa9dc0
# ‚ï†‚ïê7f47d73e-c2d4-48fb-ac67-5c5be9781c53
# ‚ïü‚îÄ75c104df-0ce9-41f2-be34-fc51d38050fd
# ‚ï†‚ïêe10e245d-0160-4acc-ba01-5d738911e854
# ‚ïü‚îÄe0d623a4-9ce3-4a5d-940c-2693d5c411b8
# ‚ï†‚ïê4e6367cf-d09d-498c-98c3-5533e02633dc
# ‚ïü‚îÄ1a4a864f-1079-40db-b242-3b25273f4948
# ‚ï†‚ïêbad1f201-3c20-469f-933f-10dd3ac2f94d
# ‚ï†‚ïê79ba3966-8463-4fea-8e24-051c1d916390
# ‚ï†‚ïê6ac982a0-e393-4c06-88eb-7ec798c65072
# ‚ï†‚ïê038502c5-fd71-4305-81d7-b0c16ff8c0d4
# ‚ï†‚ïêd7d633dc-7d66-4d8c-9135-fa70444dc6ea
# ‚ïü‚îÄ56afb21c-e994-46bc-8bb1-c3011001e25e
